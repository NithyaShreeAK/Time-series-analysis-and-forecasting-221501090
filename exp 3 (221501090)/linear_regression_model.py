# -*- coding: utf-8 -*-
"""Linear regression model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gvumUo-NYAm4HPiUXtwghSVSWuVHZ1tF
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the dataset
file_path = '/content/MLTempDataset.csv'
data = pd.read_csv(file_path)

# Convert 'Datetime' to pandas datetime format
data['Datetime'] = pd.to_datetime(data['Datetime'])

# Ensure data is sorted by time
data = data.sort_values('Datetime')

# Feature engineering: converting datetime into numerical values for model input
data['Time_Index'] = np.arange(len(data))

# Define features and target variable
X = data[['Time_Index']]
y = data['DAYTON_MW']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Forecasting on the test set
y_pred = model.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error of the Linear Regression Model: {mse}")

import matplotlib.pyplot as plt
import seaborn as sns

# Visualizing the model fit using a heatmap
plt.figure(figsize=(10, 5))
sns.heatmap([y_pred, y_test.values], cmap='YlGnBu', cbar=True, annot=False)
plt.title('Heatmap of Forecasted vs. Actual Temperatures')
plt.xlabel('Sample Index')
plt.ylabel('Temperature Forecast vs. Actual')
plt.show()